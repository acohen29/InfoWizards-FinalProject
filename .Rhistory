# Assign your name to the variable `my_name`
my_name <- "Alex Cohen"
# Assign your height (in inches) to a variable `my_height`
my_height <- 71
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 40
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Long Beach"
# Assign your name to the variable `my_name`
my_name <- "Alex Cohen"
# Assign your height (in inches) to a variable `my_height`
my_height <- 71
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 41
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Long Beach"
# Assign your name to the variable `my_name`
my_name <- "Alex Cohen"
# Assign your height (in inches) to a variable `my_height`
my_height <- 71
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 40
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Long Beach"
# Assign your name to the variable `my_name`
my_name <- "Alex Cohen"
# Assign your height (in inches) to a variable `my_height`
my_height <- 71
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 40
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Long Beach"
# Assign your name to the variable `my_name`
my_name <- "Alex Cohen"
# Assign your height (in inches) to a variable `my_height`
my_height <- 71
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 40
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Long Beach"
# Assign your name to the variable `my_name`
my_name <- "Alex Cohen"
# Assign your height (in inches) to a variable `my_height`
my_height <- 71
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 250
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R', echo=TRUE)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
print(car_makes)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
View(vehicles_1997)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R', echo=TRUE)
View(hwy_mileage_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- mean(vehicles_1997$hwy, vehicles_1997$cty)
?mean
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
View(vehicles_1997)
View(vehicles_1997)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
View(vehicles_1997)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
View(vehicles_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
efficient_2WD <- vehicles[vehicles$cty > 20 & vehicles$drive == "2-Wheel Drive", ]
View(efficient_2WD)
View(hwy_mileage_1997)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
efficient_2WD[efficient_2WD$hwy == min(efficient_2WD), "id"]
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
efficient_2WD[efficient_2WD$hwy == min(efficient_2WD$hwy), "id"]
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
View(efficient_2WD)
View(efficient_2WD)
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
install.packages("dplyr")
library(dplyr)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
car_makes <- select(vehicles, make)
View(car_makes)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(car_makes)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- filter(vehicles_1997, order(hwy))
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
?filter
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(vehicles_1997, average = (hwy + city) / 2)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
View(vehicles_1997)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
efficient_2WD <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
View(efficient_2WD)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(efficient_2WD, hwy == min(hwy))
?select
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(efficient_2WD, hwy == min(hwy))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(car_makes, make)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- arrange(vehicles_1997, hwy)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
efficient_2WD <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(efficient_2WD, hwy == min(hwy), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(efficient_2WD, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(efficient_2WD, hwy == min("hwy")), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
yes <- select(filter(efficient_2WD, hwy == min("hwy")), id)
View(yes)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(efficient_2WD, hwy == min(select(efficient_2WD, hwy))), id)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- summarize(vehicles_1997, average = mean(c(hwy, cty)))
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
View(vehicles_1997)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- mutate(vehicles_1997, average = mean(c(hwy, cty)))
View(vehicles_1997)
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- mean(c(vehicles_1997$hwy, vehicles_1997$cty))
View(vehicles_1997)
?mean
filter(vehicles, year == 2015) %>%
filter(make == "Acura") %>%
filter(hwy == max(select(vehicles, hwy)))
filter(vehicles, year == 2015) %>%
filter(make == "Acura") %>%
filter(hwy == max(select(vehicles, hwy))) %>%
print()
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
View(vehicles)
filter(vehicles, year == 2015) %>%
filter(make == "Acura") %>%
select(hwy == max(select(vehicles, hwy))) %>%
print()
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(efficient_2WD, hwy == min(select(efficient_2WD, hwy))), id)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
View(temp)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
temp <- filter(vehicles, year == 2015)
temp <- filter(temp, make == "Acura")
View(temp)
temp <- filter(temp, hwy == max(select(vehicles, hwy)))
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
filtered_vehicles <- filter(filtered_vehicles, hwy == summarize(filtered_vehicles, max(hwy))))
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
# What was the most efficient Honda model of 1995?
most_efficient(1995, "Honda")
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-2/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-1/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
styler:::style_selection()
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
numbers <- 1:100
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
temp_time <- Sys.time()
repeat_temp(numbers)
print(paste("temp complete at", Sys.time() - temp_time))
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
?repeat
?repeat
temp_time <- Sys.time()
?repeat
?repeat()
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R', echo=TRUE)
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
source('~/Schoolwork/Info 201/exercises-acohen29/ch10-dplyr/exercise-3/exercise.R')
shiny::runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
selected$class
runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
selected$class
runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
runApp('Schoolwork/Info 201/exercises-acohen29/ch16-shiny/exercise-4')
msf_user <- "PhillyQ"
msf_pass <- "Mrdope25"
url <- paste0("https://api.mysportsfeeds.com/v1.2/pull/nfl/", input$season, "/player_injuries.csv")
url <- paste0("https://api.mysportsfeeds.com/v1.2/pull/nfl/", "2016-2017", "/player_injuries.csv")
GET(url, authenticate(msf_user, msf_pass)
)
library(shiny)
library(httr)
GET(url, authenticate(msf_user, msf_pass))
GET(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/csv"),
authenticate(msf_user, msf_pass))
GET(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
url <- paste0("https://api.mysportsfeeds.com/v1.2/pull/nfl/", "2016-2017-regular", "/player_injuries.csv")
GET(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
table <- GET(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
as.data.frame(table)
View(table)
as.data.frame(content(table))
?readr
?content
as.data.frame(content(table, "csv"))
url <- paste0("https://api.mysportsfeeds.com/v1.2/pull/nfl/", "2016-2017-regular", "/player_injuries.json")
table <- GET(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
View(table)
as.data.frame(content(table, "json"))
as.data.frame(content(table, "text"))
table <- as.data.frame(content(table, "text"))
View(table)
(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
table <- GET(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
View(table)
library(jsonlite)
?fromJSON
table <- content(table, "text")
table <- GET(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
table <- content(table, "text")
runApp('Schoolwork/Info 201/InfoWizards-FinalProject')
table <- GET(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
library(shiny)
library(httr)
library(jsonlite)
source("key.R")
setwd("~/Schoolwork/Info 201/InfoWizards-FinalProject")
library(shiny)
library(httr)
library(jsonlite)
source("key.R")
url <- paste0("https://api.mysportsfeeds.com/v1.2/pull/nfl/", "2016-2017-regular", "/player_injuries.json")
table <- GET(url, add_headers('Accept-Encoding' = "gzip",'Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
content <- content(table, "text")
content <- content(table, "text/json")
?content
content <- content(table, "text", encoding = "gzip")
table <- GET(url, add_headers('Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
content <- content(table, "text")
content <- content(table, "text", encoding = "UTF-8")
table <- fromJSON(table, flatten = T)
library(shiny)
library(httr)
library(jsonlite)
source("key.R")
url <- paste0("https://api.mysportsfeeds.com/v1.2/pull/nfl/", "2016-2017-regular", "/player_injuries.json")
response <- GET(url, add_headers('Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
content <- content(response, "text", encoding = "UTF-8")
result <- fromJSON(content, flatten = T)
View(result)
result <- result$playerinjuries$playerentry
View(result)
?radioButtons
url <- paste0("https://api.mysportsfeeds.com/v1.2/pull/nfl/", "2016-2017", "/player_injuries.json")
response <- GET(url, add_headers('Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
content <- content(response, "text", encoding = "UTF-8")
result <- fromJSON(content, flatten = T)
result <- result$playerinjuries$playerentry
View(response)
url <- paste0("https://api.mysportsfeeds.com/v1.2/pull/nfl/", "2016-2017-regular", "/player_injuries.json")
response <- GET(url, add_headers('Content-Type' = "application/json"),
authenticate(msf_user, msf_pass))
content <- content(response, "text", encoding = "UTF-8")
result <- fromJSON(content, flatten = T)
result <- result$playerinjuries$playerentry
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
?observeEvent
?radioButtons
ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
radioButtons('season', "Choose season by year", c("2014-2015", "2015-2016", "2016-2017"))
),
mainPanel(
textOutput('url')
)
)
)
runApp()
runApp()
runApp()
runApp()
source('~/Schoolwork/Info 201/InfoWizards-FinalProject/key.R')
View(result)
runApp()
runApp()
source('~/Schoolwork/Info 201/InfoWizards-FinalProject/key.R')
View(result)
runApp()
runApp()
runApp()
?tableOutput
?plotOutput
?tableOutput
?dataTableOutput
runApp()
View(result)
View(response)
View(result)
View(result)
