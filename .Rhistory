compared to the league average"),
x = "Team Names",
y = "Rank")
shinyServer(func)
ui <- navbarPage(
"NFL Injuries",
#============================================================================
# Landing Page
#============================================================================
tabPanel("Landing",
titlePanel("Info Wizards Info 201 AC3"),
p(landing)
),
#============================================================================
# Question 1
#============================================================================
tabPanel("Question 1",
titlePanel("Question 1"),
sidebarLayout(
sidebarPanel(
radioButtons("season", "Choose season by year",
c("2014-2015" = "2014-2015-regular", "2015-2016" = "2015-2016-regular",
"2016-2017" = "2016-2017-regular", "Latest" = "latest")),
textInput("position_choice", "Choose position", placeholder = "All Positions")
),
mainPanel(
h3("Step 1: Choose Season Year"),
h3("Step 2: Choose one of the following positions"),
h4(textOutput("positions")),
br(),
plotOutput("plot")
)
),
br(),
textOutput("q1_analysis")
),
theme = shinytheme("flatly")
)
runApp()
shinyUI(ui)
runApp()
runApp()
ggplot(fantasy_2017, aes(X.Salary, X.Fantasy.Points)) +
geom_point() +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ggplot(data = fantasy_2017, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_point(size = 1) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5)
ggplot(data = fantasy_2017, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_point(size = 1) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ggplot(fantasy_2017, aes(x = X.Salary, y = X.Fantasy.Points)) +
geom_point(shape=3) +
geom_smooth(method=lm)
ggplot(data = fantasy_2017, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_point(size = 1, shape = 3) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ggplot(data = fantasy_2017, aes(X.Salary, X.Fantasy.Points, colour = "black")) +
geom_point(size = 1, shape = 3) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ggplot(data = fantasy_2017, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_point(size = 1, shape = 3) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ggplot(fantasy_2017, aes(X.Salary, X.Fantasy.Points)) +
geom_point() +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ui <- navbarPage(
"NFL Injuries",
#============================================================================
# Landing Page
#============================================================================
tabPanel("Landing",
titlePanel("Info Wizards Info 201 AC3"),
p(landing)
),
#============================================================================
# Question 1
#============================================================================
tabPanel("Question 1",
titlePanel("Question 1"),
sidebarLayout(
sidebarPanel(
radioButtons("season", "Choose season by year",
c("2014-2015" = "2014-2015-regular", "2015-2016" = "2015-2016-regular",
"2016-2017" = "2016-2017-regular", "Latest" = "latest")),
textInput("position_choice", "Choose position", placeholder = "All Positions")
),
mainPanel(
h3("Step 1: Choose Season Year"),
h3("Step 2: Choose one of the following positions"),
h4(textOutput("positions")),
br(),
plotOutput("plot")
)
),
br(),
textOutput("q1_analysis")
),
#============================================================================
# Question 2
#============================================================================
tabPanel("Question 2",
titlePanel("Question 2")
),
#============================================================================
# Question 3
#============================================================================
?checkboxGroupInput
tabPanel("Question 3",
titlePanel("Question 3"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("season", "Choose season by year",
c("2014-2015" = "2014-2015-regular", "2015-2016" = "2015-2016-regular",
"2016-2017" = "2016-2017-regular", "Latest" = "latest")),
textInput("position_choice", "Choose position", placeholder = "All Positions")
),
mainPanel(
h3("Step 1: Choose Season Year"),
h3("Step 2: Choose one of the following positions"),
h4(textOutput("positions")),
br(),
plotOutput("plot")
)
),
br(),
textOutput("q1_analysis")
),
theme = shinytheme("flatly")
)
?checkboxGroupInput
runApp()
# Reads in csv files containing data for each player, each game per season
fantasy_2017 <- read.csv(file = "2017_2018_Fantasy.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/InfoWizards-FinalProject/Question3/Data")
# Reads in csv files containing data for each player, each game per season
fantasy_2017 <- read.csv(file = "2017_2018_Fantasy.csv", stringsAsFactors = FALSE)
fantasy_2016 <- read.csv(file = "2016_2017_Fantasy.csv", stringsAsFactors = FALSE)
fantasy_2015 <- read.csv(file = "2015_2016_Fantasy.csv", stringsAsFactors = FALSE)
fantasy_2014 <- read.csv(file = "2014_2015_Fantasy.csv", stringsAsFactors = FALSE)
library("shiny")
library("httr")
library("dplyr")
library("jsonlite")
library("ggplot2")
library("plotly")
library("magrittr")
library("RCurl")
library("plotly")
source("key.R")
# Reads in csv files containing data for each player, each game per season
fantasy_2017 <- read.csv(file = "2017_2018_Fantasy.csv", stringsAsFactors = FALSE)
fantasy_2016 <- read.csv(file = "2016_2017_Fantasy.csv", stringsAsFactors = FALSE)
fantasy_2015 <- read.csv(file = "2015_2016_Fantasy.csv", stringsAsFactors = FALSE)
fantasy_2014 <- read.csv(file = "2014_2015_Fantasy.csv", stringsAsFactors = FALSE)
vector <- c(2, 3, 4)
# Creates 2 vectors by extracting values from 2 cetain columns
# For 2017
salary_2017 <- fantasy_2017$X.Salary
points_2017 <- fantasy_2017$X.Fantasy.Points
# For 2016
salary_2016 <- fantasy_2016$X.Salary
points_2016 <- fantasy_2016$X.Fantasy.Points
# For 2015
salary_2015 <- fantasy_2015$X.Salary
points_2015 <- fantasy_2015$X.Fantasy.Points
# For 2014
salary_2014 <- fantasy_2014$X.Salary
points_2014 <- fantasy_2014$X.Fantasy.Points
# First, creates a function that will Run an rsquared test to test the correlation between
# how much a player costs and how many points he puts up. Then use the salary and points
# For each player each game for seasons 2014-2017 to test the correlation per year
rsq <- function(x, y) summary(lm(y~x))$r.squared
rsq(salary_2017, points_2017)
rsq(salary_2016, points_2016)
rsq(salary_2015, points_2015)
rsq(salary_2014, points_2014)
# We get answers .15-.2 depending on the year. This signals a very weak correlation
# Between salary and points. More specifically, salary can only explain ~10% of the
# standard deviation. The other 90% are based on luck, chance, or other
# Unpredictable factors
# Code for question 3
ggplot(data = fantasy_2017, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_line(size = 1, shape = 3) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ggplot(data = fantasy_2016, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_line(size = 1, shape = 3) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ggplot(data = fantasy_2015, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_line(size = 1, shape = 3) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ggplot(data = fantasy_2014, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_line(size = 1, shape = 3) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
ggplot(data = fantasy_2017, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_line(size = 1, shape = 3) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
install.packages(quantreg)
install.packages("quantreg")
library("quantreg")
ggplot(data = fantasy_2016, aes(X.Salary, X.Fantasy.Points, colour = "smoke")) +
geom_line(size = 1, shape = 3) +
geom_quantile(quantiles = 0.5, size = 0.5, alpha = 0.5) +
geom_smooth(method = "lm", method.args = list(family = poisson), aes(color = "poisson"), se = FALSE) +
geom_smooth(method = MASS::glm.nb, aes(color = "NB"), se = FALSE)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(fantasy_2017, aes(X.Salary, X.Fantasy.Points))
g + geom_count(col="tomato3", show.legend=F) +
labs(subtitle="Cost vs Points",
y="points",
x="Price",
title="Counts Plot")
ggcorrplot(fantasy_2017, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
install.packages("ggcorrplot")
library("ggcorrplot")
ggcorrplot(fantasy_2017, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
ggcorrplot(fantasy_2017, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
corr <- round(cor(fantasy_2017), 1)
data(fantasy_2017)
# Reads in csv files containing data for each player, each game per season
fantasy_2017 <- read.csv(file = "2017_2018_Fantasy.csv", stringsAsFactors = FALSE)
data(fantasy_2017)
corr <- round(cor(mtcars), 1)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
corr <- round(cor(fantasy_2017), 1)
mtcars
View(fantasy_2017)
fant_2017 <- select(fantasy_2017, X.Salary, X.Fantasy.Points)
corr <- round(cor(fant_2017), 1)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
corr <- round(cor(fant_2017), 1)
corr
View(corr)
fant_2017 <- fantasy_2017[, c("X.Salary", "X.Fantasy.Points")]
View(fant_2017)
corr <- round(cor(fant_2017), 1)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of Cost and Points",
ggtheme=theme_bw)
corr <- round(cor(fant_2017), 1)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of Cost and Points",
ggtheme=theme_bw)
install.packages(corrgram)
install.packages("corrgram")
library("corrgram")
library("corrgram")
corrgram(fant_2017, order=TRUE, lower.panel=panel.ellipse,
upper.panel=panel.pts, text.panel=panel.txt,
diag.panel=panel.minmax,
main="Car Mileage Data in PC2/PC1 Order")
install.packages("ggExtra")
library("ggExtra")
g + geom_count(col="tomato3", show.legend=F) +
labs(subtitle="Cost vs Points",
y="points",
x="Price",
title="Counts Plot")
install.packages(gganimate)
install.packages("gganimate")
install.packages("gapminder")
library("gganimate")
g <- ggplot(fantasy_2016, aes(X.Salary, X.Fantasy.Points))
g <- ggplot(fantasy_2015, aes(X.Salary, X.Fantasy.Points))
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(fantasy_2014, aes(X.Salary, X.Fantasy.Points))
g + geom_count(col="tomato3", show.legend=F) +
labs(subtitle="Cost vs Points",
y="points",
x="Price",
title="Counts Plot")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(fantasy_2015, aes(X.Salary, X.Fantasy.Points))
g + geom_count(col="tomato3", show.legend=F) +
labs(subtitle="Cost vs Points",
y="points",
x="Price",
title="Counts Plot")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(fantasy_2016, aes(X.Salary, X.Fantasy.Points))
g + geom_count(col="tomato3", show.legend=F) +
labs(subtitle="Cost vs Points",
y="points",
x="Price",
title="Counts Plot")
source('~/Desktop/InfoWizards-FinalProject/Final/app.R')
library(shiny)
library(httr)
library(shinythemes)
source("analysis.R")
ui <- navbarPage(
"NFL Injuries",
#============================================================================
# Landing Page
#============================================================================
tabPanel("Landing",
titlePanel("Info Wizards Info 201 AC3"),
p(landing)
),
#============================================================================
# Question 1
#============================================================================
tabPanel("Question 1",
titlePanel("Question 1"),
sidebarLayout(
sidebarPanel(
radioButtons("season", "Choose season by year",
c("2014-2015" = "2014-2015-regular", "2015-2016" = "2015-2016-regular",
"2016-2017" = "2016-2017-regular", "Latest" = "latest")),
textInput("position_choice", "Choose position", placeholder = "All Positions")
),
mainPanel(
h3("Step 1: Choose Season Year"),
h3("Step 2: Choose one of the following positions"),
h4(textOutput("positions")),
br(),
plotOutput("plot")
)
),
br(),
textOutput("q1_analysis")
),
#============================================================================
# Question 2
#============================================================================
tabPanel("Question 2",
titlePanel("Question 2")
),
#============================================================================
# Question 3
#============================================================================
tabPanel("Question 3",
titlePanel("Question 3"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("Year", "Choose season by year",
c("2014-2015" = "2014-2015-regular", "2015-2016" = "2015-2016-regular",
"2016-2017" = "2016-2017-regular", "Latest" = "latest")),
textInput("position_choice", "Choose position", placeholder = "All Positions")
),
mainPanel(
h3("Step 1: Choose Season Year"),
h3("Step 2: Choose one of the following positions"),
h4(textOutput("positions")),
br(),
plotOutput("plot")
)
),
br(),
textOutput("q1_analysis")
),
theme = shinytheme("flatly")
)
shinyUI(ui)
runApp()
runApp('~/Desktop/InfoWizards-FinalProject')
library(shiny); source('Final/app.R')
source('Final/app.R')
library("shiny")
library("httr")
library("dplyr")
library("jsonlite")
library("ggplot2")
library("plotly")
library("quantreg")
library("gganimate")
source("key.R")
# Reads in csv files containing data for each player, each game per season
fantasy_2017 <- read.csv(file = "2017_2018_Fantasy.csv", stringsAsFactors = FALSE)
fantasy_2016 <- read.csv(file = "2016_2017_Fantasy.csv", stringsAsFactors = FALSE)
fantasy_2015 <- read.csv(file = "2015_2016_Fantasy.csv", stringsAsFactors = FALSE)
fantasy_2014 <- read.csv(file = "2014_2015_Fantasy.csv", stringsAsFactors = FALSE)
vector <- c(2, 3, 4)
# Creates 2 vectors by extracting values from 2 cetain columns
# For 2017
salary_2017 <- fantasy_2017$X.Salary
points_2017 <- fantasy_2017$X.Fantasy.Points
# For 2016
salary_2016 <- fantasy_2016$X.Salary
points_2016 <- fantasy_2016$X.Fantasy.Points
# For 2015
salary_2015 <- fantasy_2015$X.Salary
points_2015 <- fantasy_2015$X.Fantasy.Points
# For 2014
salary_2014 <- fantasy_2014$X.Salary
points_2014 <- fantasy_2014$X.Fantasy.Points
# First, creates a function that will Run an rsquared test to test the correlation between
# how much a player costs and how many points he puts up. Then use the salary and points
# For each player each game for seasons 2014-2017 to test the correlation per year
rsq <- function(x, y) summary(lm(y~x))$r.squared
rsq(salary_2017, points_2017)
rsq(salary_2016, points_2016)
rsq(salary_2015, points_2015)
rsq(salary_2014, points_2014)
# We get answers .15-.2 depending on the year. This signals a very weak correlation
# Between salary and points. More specifically, salary can only explain ~10% of the
# standard deviation. The other 90% are based on luck, chance, or other
# Unpredictable factors
# Code for question 3
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(fantasy_2017, aes(X.Salary, X.Fantasy.Points))
g + geom_count(col="tomato3", show.legend=F) +
labs(subtitle="Cost vs Points",
y="points",
x="Price",
title="Counts Plot")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(fantasy_2016, aes(X.Salary, X.Fantasy.Points))
g + geom_count(col="tomato3", show.legend=F) +
labs(subtitle="Cost vs Points",
y="points",
x="Price",
title="Counts Plot")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(fantasy_2015, aes(X.Salary, X.Fantasy.Points))
g + geom_count(col="tomato3", show.legend=F) +
labs(subtitle="Cost vs Points",
y="points",
x="Price",
title="Counts Plot")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(fantasy_2014, aes(X.Salary, X.Fantasy.Points))
g + geom_count(col="tomato3", show.legend=F) +
labs(subtitle="Cost vs Points",
y="points",
x="Price",
title="Counts Plot")
source('Final/app.R')
runApp()
runApp()
runApp()
runApp()
source('Final/app.R')
source('Final/app.R')
getwd()
setwd("~/Desktop/InfoWizards-FinalProject/Final")
source('app.R')
source("analysis.R")
setwd("~/Desktop/InfoWizards-FinalProject")
runApp()
runApp()
source('Question3/app.R')
source('Question3/app.R')
source('Question3/app.R')
source('Question3/app.R')
source('Question3/app.R')
source('Question3/app.R')
